/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ISurveyQuestion, ISurveyQuestionType } from "./utils/response";
export namespace Components {
    interface DcElectionCandidate {
        "bio": string;
        "fullname": string;
        "office": string;
        "photo": string;
        "website": string;
    }
    interface DcElectionGallery {
        "appearance": "grid" | "stack" | "narrow"| "quote";
        "candidates": Array<any>;
    }
    interface DcElectionQuery {
        "question": ISurveyQuestion;
    }
    interface DcElectionQuestion {
        "question": ISurveyQuestion;
        /**
          * Holds an Array of answers to candidates [    {response: "Yes", "candidates": ["C1", "C2"]},    {response: "No", "candidates": ["C3", "C4"]}  ]
         */
        "responses": Array<any>;
        "showNoResponse": boolean;
        "type": ISurveyQuestionType;
    }
    interface DcElectionSurvey {
        /**
          * Optional URL to CSV to candidates: Race,Name,Website
         */
        "candidatesFile": string;
        /**
          * URL to Survey responses
         */
        "filename": string;
        /**
          * String to filter Race
         */
        "filter": string;
        /**
          * Format of the Survey: column | row | surveymonkey
         */
        "format": string;
        /**
          * Option to show or hide the Map + dropdown
         */
        "showFilter": boolean;
    }
    interface DcFeatureSummary {
        "candidates": any;
        "race": string;
        "website": string;
    }
    interface DcFilter {
        "filter": string;
        "url": string;
    }
    interface DcLoader {
    }
    interface DcMap {
        "filter": string;
        "selectFeature": (feature: any, emitEvent?: boolean) => Promise<void>;
    }
    interface DcSurveySummary {
        "questions": any;
    }
}
export interface DcElectionSurveyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDcElectionSurveyElement;
}
export interface DcFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDcFilterElement;
}
export interface DcMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDcMapElement;
}
declare global {
    interface HTMLDcElectionCandidateElement extends Components.DcElectionCandidate, HTMLStencilElement {
    }
    var HTMLDcElectionCandidateElement: {
        prototype: HTMLDcElectionCandidateElement;
        new (): HTMLDcElectionCandidateElement;
    };
    interface HTMLDcElectionGalleryElement extends Components.DcElectionGallery, HTMLStencilElement {
    }
    var HTMLDcElectionGalleryElement: {
        prototype: HTMLDcElectionGalleryElement;
        new (): HTMLDcElectionGalleryElement;
    };
    interface HTMLDcElectionQueryElement extends Components.DcElectionQuery, HTMLStencilElement {
    }
    var HTMLDcElectionQueryElement: {
        prototype: HTMLDcElectionQueryElement;
        new (): HTMLDcElectionQueryElement;
    };
    interface HTMLDcElectionQuestionElement extends Components.DcElectionQuestion, HTMLStencilElement {
    }
    var HTMLDcElectionQuestionElement: {
        prototype: HTMLDcElectionQuestionElement;
        new (): HTMLDcElectionQuestionElement;
    };
    interface HTMLDcElectionSurveyElement extends Components.DcElectionSurvey, HTMLStencilElement {
    }
    var HTMLDcElectionSurveyElement: {
        prototype: HTMLDcElectionSurveyElement;
        new (): HTMLDcElectionSurveyElement;
    };
    interface HTMLDcFeatureSummaryElement extends Components.DcFeatureSummary, HTMLStencilElement {
    }
    var HTMLDcFeatureSummaryElement: {
        prototype: HTMLDcFeatureSummaryElement;
        new (): HTMLDcFeatureSummaryElement;
    };
    interface HTMLDcFilterElement extends Components.DcFilter, HTMLStencilElement {
    }
    var HTMLDcFilterElement: {
        prototype: HTMLDcFilterElement;
        new (): HTMLDcFilterElement;
    };
    interface HTMLDcLoaderElement extends Components.DcLoader, HTMLStencilElement {
    }
    var HTMLDcLoaderElement: {
        prototype: HTMLDcLoaderElement;
        new (): HTMLDcLoaderElement;
    };
    interface HTMLDcMapElement extends Components.DcMap, HTMLStencilElement {
    }
    var HTMLDcMapElement: {
        prototype: HTMLDcMapElement;
        new (): HTMLDcMapElement;
    };
    interface HTMLDcSurveySummaryElement extends Components.DcSurveySummary, HTMLStencilElement {
    }
    var HTMLDcSurveySummaryElement: {
        prototype: HTMLDcSurveySummaryElement;
        new (): HTMLDcSurveySummaryElement;
    };
    interface HTMLElementTagNameMap {
        "dc-election-candidate": HTMLDcElectionCandidateElement;
        "dc-election-gallery": HTMLDcElectionGalleryElement;
        "dc-election-query": HTMLDcElectionQueryElement;
        "dc-election-question": HTMLDcElectionQuestionElement;
        "dc-election-survey": HTMLDcElectionSurveyElement;
        "dc-feature-summary": HTMLDcFeatureSummaryElement;
        "dc-filter": HTMLDcFilterElement;
        "dc-loader": HTMLDcLoaderElement;
        "dc-map": HTMLDcMapElement;
        "dc-survey-summary": HTMLDcSurveySummaryElement;
    }
}
declare namespace LocalJSX {
    interface DcElectionCandidate {
        "bio"?: string;
        "fullname"?: string;
        "office"?: string;
        "photo"?: string;
        "website"?: string;
    }
    interface DcElectionGallery {
        "appearance"?: "grid" | "stack" | "narrow"| "quote";
        "candidates"?: Array<any>;
    }
    interface DcElectionQuery {
        "question"?: ISurveyQuestion;
    }
    interface DcElectionQuestion {
        "question"?: ISurveyQuestion;
        /**
          * Holds an Array of answers to candidates [    {response: "Yes", "candidates": ["C1", "C2"]},    {response: "No", "candidates": ["C3", "C4"]}  ]
         */
        "responses"?: Array<any>;
        "showNoResponse"?: boolean;
        "type"?: ISurveyQuestionType;
    }
    interface DcElectionSurvey {
        /**
          * Optional URL to CSV to candidates: Race,Name,Website
         */
        "candidatesFile"?: string;
        /**
          * URL to Survey responses
         */
        "filename"?: string;
        /**
          * String to filter Race
         */
        "filter"?: string;
        /**
          * Format of the Survey: column | row | surveymonkey
         */
        "format"?: string;
        "onFilterChanged"?: (event: DcElectionSurveyCustomEvent<any>) => void;
        /**
          * Option to show or hide the Map + dropdown
         */
        "showFilter"?: boolean;
    }
    interface DcFeatureSummary {
        "candidates"?: any;
        "race"?: string;
        "website"?: string;
    }
    interface DcFilter {
        "filter"?: string;
        "onFilterChanged"?: (event: DcFilterCustomEvent<any>) => void;
        "url"?: string;
    }
    interface DcLoader {
    }
    interface DcMap {
        "filter"?: string;
        "onFeatureSelected"?: (event: DcMapCustomEvent<any>) => void;
        "onMapLoaded"?: (event: DcMapCustomEvent<any>) => void;
    }
    interface DcSurveySummary {
        "questions"?: any;
    }
    interface IntrinsicElements {
        "dc-election-candidate": DcElectionCandidate;
        "dc-election-gallery": DcElectionGallery;
        "dc-election-query": DcElectionQuery;
        "dc-election-question": DcElectionQuestion;
        "dc-election-survey": DcElectionSurvey;
        "dc-feature-summary": DcFeatureSummary;
        "dc-filter": DcFilter;
        "dc-loader": DcLoader;
        "dc-map": DcMap;
        "dc-survey-summary": DcSurveySummary;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dc-election-candidate": LocalJSX.DcElectionCandidate & JSXBase.HTMLAttributes<HTMLDcElectionCandidateElement>;
            "dc-election-gallery": LocalJSX.DcElectionGallery & JSXBase.HTMLAttributes<HTMLDcElectionGalleryElement>;
            "dc-election-query": LocalJSX.DcElectionQuery & JSXBase.HTMLAttributes<HTMLDcElectionQueryElement>;
            "dc-election-question": LocalJSX.DcElectionQuestion & JSXBase.HTMLAttributes<HTMLDcElectionQuestionElement>;
            "dc-election-survey": LocalJSX.DcElectionSurvey & JSXBase.HTMLAttributes<HTMLDcElectionSurveyElement>;
            "dc-feature-summary": LocalJSX.DcFeatureSummary & JSXBase.HTMLAttributes<HTMLDcFeatureSummaryElement>;
            "dc-filter": LocalJSX.DcFilter & JSXBase.HTMLAttributes<HTMLDcFilterElement>;
            "dc-loader": LocalJSX.DcLoader & JSXBase.HTMLAttributes<HTMLDcLoaderElement>;
            "dc-map": LocalJSX.DcMap & JSXBase.HTMLAttributes<HTMLDcMapElement>;
            "dc-survey-summary": LocalJSX.DcSurveySummary & JSXBase.HTMLAttributes<HTMLDcSurveySummaryElement>;
        }
    }
}
