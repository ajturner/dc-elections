{"version":3,"sources":["src/components/dc-election-survey/dc-election-survey.css?tag=dc-election-survey","src/components/dc-election-survey/dc-election-survey.tsx"],"names":["dcElectionSurveyCss","DcElectionSurvey","[object Object]","hostRef","this","filename","format","candidatesFiles","filter","showFilter","candidates","questions","loading","stopFilterPropagation","Response.fetchResponses","Response.fetchCandidates","getFilterBookmark","state","event","ids","Object","keys","detail","map","id","mapEl","highlightFeatures","feature","undefined","featureSummaryEl","race","attributes","SMD_ID","website","WEB_URL","ANC_ID","value","newValue","console","debug","filterDropdownEl","setFilterBookmark","slice","length","selectFeature","filterInput","h","class","_a","name","ref","el","question","responses","type","Type","renderSummary","renderQuestion","renderFilter","renderHelp","Host","renderLoader","renderBody"],"mappings":"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","sourcesContent":[":host {\n  display: block;\n  font-family: sans-serif;\n}\n.filter {\n  max-width: 800px;\n  z-index: 100;\n}\n.help {\n  margin: 1em 0;\n  padding: 1em 0 1em 1em;\n  border: thin solid #0f9535;\n  max-width: 780px;\n}\n/* contains card within filter */\n.filter {\n  /* position: relative; */\n  display: block;\n}\n.filter.summary {\n  position: sticky;\n  top: 0;\n  background-color: white;\n  opacity: 1.0;\n}\n\ndc-map {\n  height: 400px;\n  width: 400px;\n}\ndc-feature-summary {\n  position: absolute;\n  top: 250px;\n  background-color: rgba(255,255,255, 0.8);\n  width: 300px;\n}\ndc-survey-summary {\n  z-index: 10;\n}\ndc-filter {\n  margin-top: 0.5em;\n}\nol {\n  /* margin: 0 0 0 1em; */\n  padding: 0;\n  font: italic 2em Georgia;\n  color: #666;\n  list-style-position: outside;\n  padding-left: 1.5em;\n}\nol dc-election-question {\n  font: normal 16px Helvetica, Arial, Sans-Serif;\n  color: #000;  \n}\nol li {\n  border-top: thin solid #444;\n  margin-top: 1em;\n}\n\ninput {\n  font-size: 1.2em;\n  height: 2em;\n  width: 12em;\n  margin: 0 1em;\n}","import { Component, Event, EventEmitter, Host, h, Prop, State, Watch, Listen } from '@stencil/core';\nimport * as Response from '../../utils/response'\nimport state from '../../utils/store';\n// @ts-ignore\nimport HTMLCalciteComboboxElement from \"@esri/calcite-components/dist/components/calcite-combobox\";\n// @ts-ignore\nimport HTMLDcFilterElement from '../dc-filter';\nimport { getFilterBookmark, setFilterBookmark } from '../../utils/utils';\n\n@Component({\n  tag: 'dc-election-survey',\n  styleUrl: 'dc-election-survey.css',\n  shadow: false,\n})\nexport class DcElectionSurvey {\n  /**\n   * URL to Survey responses\n   */\n  @Prop() filename:string = null;\n\n  /**\n   * Format of the Survey: column | row | surveymonkey\n   */\n  @Prop() format:string = \"column\";\n  \n  /**\n  * Optional URL to CSV to candidates: Race,Name,Website\n  */\n  @Prop() candidatesFiles:string = null;\n\n  /** String to filter Race\n   */\n  @Prop({ mutable: true, reflect: true }) filter:string = null;\n\n  /**\n   * Option to show or hide the Map + dropdown\n   */\n  @Prop() showFilter:boolean = false;\n\n  // TODO: can this move to the state handler?\n  @Event({ cancelable: false })  filterChanged: EventEmitter<any>;\n\n  @State() candidates: Array<any> = [];\n  @State() questions: Array<any> = [];\n  @State() loading: boolean = true;\n\n  filterInput!: HTMLInputElement;\n  filterDropdownEl: HTMLDcFilterElement;\n  featureSummaryEl: HTMLDcFeatureSummaryElement;\n  mapEl: HTMLDcMapElement;\n\n  async componentDidLoad() {\n    this.questions = await Response.fetchResponses(this.filename, this.format);\n\n    // Optionally load a CSV of Candidates (Race,Name,Website)\n    if(!!this.candidatesFiles) {\n      this.candidates = await Response.fetchCandidates( this.candidatesFiles )\n    }\n\n    this.filter = getFilterBookmark();\n    if(!!this.filter) {\n      // set the filter state\n      state.filter = this.filter;\n    }\n    // console.debug(\"dc-election-survey\", {candidates: this.candidates, questions: this.questions})\n    this.loading = false;\n  }\n\n  // TODO: This is a hack to stop propagating events all around, stopping map zoom\n  @State() stopFilterPropagation: boolean = false;\n\n  // Click on chart\n  @Listen('aggregateSummary')\n  async handleAggregateSummary(event) {\n    const ids = Object.keys(event.detail['Race']).map((id) => {\n      return id;\n    })\n    this.mapEl.highlightFeatures(ids);\n  }\n\n  @Listen(\"featureSelected\")\n  featureSelectedHandler(event) {\n    \n    this.stopFilterPropagation = true;\n    if(event.detail.feature !== undefined) {\n      // console.debug(\"dc-election-survey: featureSelectedHandler\", event.detail.feature.attributes);\n      this.featureSummaryEl.race = event.detail.feature.attributes.SMD_ID;\n      this.featureSummaryEl.website = event.detail.feature.attributes.WEB_URL;\n      this.filter = event.detail.feature.attributes.ANC_ID;\n    } else {\n      this.filter = \"\";\n      this.featureSummaryEl.race = \"\";\n    }\n    state.filter = this.filter;\n    \n  }\n  @Listen(\"filterChanged\")\n  filterChangedHandler(event) {\n    // console.debug(\"dc-election-survey: filterChangedHandler\", event.detail.value)\n    this.filter = event.detail.value;\n\n    // Update summary if the filter is an SMD\n    if(!this.stopFilterPropagation) {\n      this.featureSummaryEl.race = event.detail.value;\n    }\n    this.stopFilterPropagation = false;\n  }\n\n  @Watch('filter')\n  filterPropChanged(newValue: string) {\n    console.debug(\"dc-election-survey: filterPropChanged\", {newValue})\n    // TODO move these to reactive props on elements\n    if(!!this.filterDropdownEl) {\n      this.filterDropdownEl.value = newValue;\n    }\n\n    setFilterBookmark(newValue)\n    \n    const feature = { attributes: {\n      ANC_ID: newValue.slice(0,2)\n    }};\n    if(newValue.length === 4) {\n      feature.attributes['SMD_ID'] = newValue;\n    }\n    \n    if(!this.stopFilterPropagation && !!this.mapEl) {\n      // @ts-ignore for some reason doesn't detect that mathod has two parameters\n      this.mapEl.selectFeature( feature, false /* emitEvent */ );    \n      state.filter = newValue;\n    }\n  }\n  \n  clearFilters() {\n    this.filter = '';\n    state.filter = '';\n    if(this.filterInput) {\n      this.filterInput.value = '';\n    }\n    \n    return false; // prevent routing/actions\n  }\n\n  renderFilter(filter:string) {\n    console.debug(\"dc-election-survey: renderFilter\", {filter})\n    if(this.showFilter) {\n      return (\n        <div class={`filter ${this.filter?.length === 0 ? 'summary': ''}`}>\n          <slot name=\"filter\"></slot>\n          <dc-map\n            ref={(el) => this.mapEl = el}\n          ></dc-map>\n          <dc-feature-summary\n            candidates={this.candidates}\n            ref={(el) => this.featureSummaryEl = el}\n          ></dc-feature-summary>\n          <dc-filter\n            ref={(el) => this.filterDropdownEl = el}\n            filter={filter}\n          >\n          \n          </dc-filter>\n\n          {/* <input onChange={this.filterHandler} \n                 ref={(el) => this.filterInput = el} \n                 value={filter} \n                 placeholder=\"Search by Ward or ANC\"\n            ></input>\n          <a href='#' onClick={this.clearFilters}>clear</a> */}\n        </div>\n      )\n    }\n    \n  }\n  \n  // Render differently depending on type\n  renderQuestion(question: Response.ISurveyResponse) {\n    return (\n      <dc-election-question \n        question={question.question}\n        responses={question.responses}\n        type={question.question.Type}\n      ></dc-election-question>\n    )\n  }\n  renderHelp() {\n    return (\n      <div>\n        <div class=\"help\">\n          Filter to local candidates by clicking on the map, search by address, or select ANC or SMD.\n        </div>\n        {this.renderSummary()}\n      </div>\n    )\n  }\n  renderSummary() {\n    return (\n      <dc-survey-summary\n        class=\"summary\"\n        questions={this.questions}\n      ></dc-survey-summary>      \n    )\n  }\n\n  // TODO: Simplify the filter logic\n  renderBody(filter:string) {\n    const questions = (\n      <ol>\n        {this.questions.map((question) => {\n          return (<li>{this.renderQuestion(question)}</li>);  \n        })}\n      </ol>)\n    return (\n      <div class=\"questions\">\n        {this.renderFilter(filter)}\n        {!this.showFilter || filter === null || (!!filter && filter.length !== 0) ? questions : this.renderHelp()}\n      </div>\n    )\n  }\n\n  renderLoader() {\n    return (<dc-loader>Loading survey responses...</dc-loader>);\n  }\n  render() {\n    return (\n      <Host>\n        <slot name=\"title\"></slot>\n        \n        {this.loading || this.questions.length === 0 ? this.renderLoader() : this.renderBody(this.filter) }\n        \n      </Host>\n    );\n  }\n\n}\n"]}